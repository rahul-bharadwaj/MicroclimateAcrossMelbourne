)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_void()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_test()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_get()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_grey()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_replace()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_set()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_classic()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_gray()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_grey()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point() +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_gray()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 2) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_gray()+
scale_color_viridis_c(option = "B")+
facet_wrap(~ description, nrow = 5)
options(htmltools.dir.version = FALSE)
vis_dat(data)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(tidyverse)
library(kableExtra)
library(leaflet)
library(ggthemes)
library(lubridate)
library(viridis)
library(visdat)
xaringanExtra::use_panelset()
vis_dat(data)
vis_miss(data)
install.packages("xaringanExtra")
devtools::install_github("gadenbuie/xaringanExtra")
devtools::install_github("hadley/emo")
weather$local_time <- as_datetime(weather$local_time)
ggplot(weather, aes(
x= local_time,
y = temp,
color = temp
)) +
geom_point() +
labs(x = "Date", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_hc(style = "darkunica")+
scale_color_viridis_c(option = "B")+
facet_grid(.~ description) +
theme(axis.text.x = element_text(angle = 90,color = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
axis.text.y = element_text(color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"), panel.background = element_rect(
fill = "pink3", color = "black", size = .5, linetype = "solid"))
weather$local_time <- as_datetime(weather$local_time)
ggplot(weather, aes(
x= local_time,
y = temp,
color = temp
)) +
geom_point() +
labs(x = "Date", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_hc(style = "darkunica")+
scale_color_viridis_c(option = "B")+
facet_grid(.~ description) +
theme(axis.text.x = element_text(angle = 90,color = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
axis.text.y = element_text(color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"), panel.background = element_rect(
fill = "grey", color = "black", size = .5, linetype = "solid"))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
plotly::ggplotly(ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right")+
facet_wrap(~ description, nrow = 5))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right")+
facet_wrap(~ description, nrow = 5)
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0),
axis.title.x = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)))+
facet_wrap(~ description, nrow = 5)
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0))+
facet_wrap(~ description, nrow = 5)
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)))+
facet_wrap(~ description, nrow = 5)
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 3) +
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 0, r = 0, b = 20, l = 0)))+
facet_wrap(~ description, nrow = 5)
options(htmltools.dir.version = FALSE)
locations <- read.csv(here::here("/data/Microclimate_Sensor_Locations.csv"))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(tidyverse)
library(kableExtra)
library(leaflet)
library(ggthemes)
library(lubridate)
library(viridis)
library(visdat)
xaringanExtra::use_panelset()
locations <- read.csv(here::here("/data/Microclimate_Sensor_Locations.csv"))
setwd("D:/Learning/MonashUniversity/Units/Sem2/ETC5523 - Communicating With Data/Assignments/cwd-presentation")
locations <- read.csv(here::here("/data/Microclimate_Sensor_Locations.csv"))
ggplot(avg_weather,aes(
x = reorder(description,avg),
y = avg,
fill = description
)) +
geom_col()+
geom_text(label = paste(round(avg_weather$avg,2),"°C"), hjust = 1.5)+
coord_flip()+
theme(axis.text.y = element_blank())+
labs(x = "Average Temperature(°C)", y = "Sensor Location", title= "Average temperatures across Melbourne(°C)",fill = "Sensor Location")
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
weather$local_time <- as_datetime(weather$local_time)
ggplot(weather, aes(
x= local_time,
y = temp,
color = temp
)) +
geom_point() +
labs(x = "Date", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_hc(style = "darkunica")+
scale_color_viridis_c(option = "B")+
facet_grid(.~ description) +
theme(axis.text.x = element_text(angle = 90,color = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=2),
axis.text.y = element_text(color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"), panel.background = element_rect(
fill = "grey", color = "black", size = .5, linetype = "solid"))
leaflet(day_change) %>% addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", day_change$description, "<br>",
"Average Temperature:", round(day_change$avg_temp,2),"°C","<br>",
"Date:", day_change$date,"<br>",
"Hour:", day_change$hour,"<br>",
"Minute:", day_change$mm))
grouped_date <- selected_date %>% filter(date == "2019/12/20") %>%
select(description,hour,date,temp) %>%
group_by(hour,description,date) %>%
summarise(avg = mean(temp))
ggplot(grouped_date, aes(
x= hour,
y = avg,
color = avg
)) +
geom_point(size = 4)+
labs(x = "Hour of the day", y = "Temperature(°C)",color = "Temperature(°C)")+
theme_economist()+
scale_color_viridis_c(option = "B")+
theme(legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 0, r = 0, b = 10, l = 0)),
axis.text.y = element_blank())+
facet_wrap(~ description, nrow = 5)
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE, warning = FALSE)
library(tidyverse)
library(kableExtra)
library(leaflet)
library(ggthemes)
library(lubridate)
library(viridis)
library(visdat)
xaringanExtra::use_panelset()
locations <- read.csv(here::here("/data/Microclimate_Sensor_Locations.csv"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
ggmap(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
ggmap(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leafelt(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, svg_weather, by = "description")
icons <- awesomeIcons(
icon = 'cloud',
iconColor = 'white',
library = 'fa',
markerColor = 'yellow'
)
avgloc <- left_join(locations, avg_weather, by = "description")
leaflet(locations) %>%
addTiles() %>%
addAwesomeMarkers(icon = icons,
~longitude,
~latitude,
popup = paste("Location:", avgloc$description, "<br>",
"Average Temperature:", round(avgloc$avg,2),"°C"))
setwd("D:/Learning/MonashUniversity/Units/Sem1/ETC5512 - Wild Caught Data/Assignments/Assignment4/ETC5512_Assignment4_31322239/assignment4_template/analysis")
load("D:/Learning/MonashUniversity/Units/Sem1/ETC5512 - Wild Caught Data/Assignments/Assignment4/ETC5512_Assignment4_31322239/assignment4_template/data/city.rda")
View(city)
load("D:/Learning/MonashUniversity/Units/Sem1/ETC5512 - Wild Caught Data/Assignments/Assignment4/ETC5512_Assignment4_31322239/assignment4_template/data/city.rda")
View(city)
